import { BaseModel } from './BaseModel';
import { PortModel } from './PortModel';
import { PointModel } from './PointModel';
import { LabelModel } from './LabelModel';
import { DiagramEngine } from '../DiagramEngine';
import { DiagramModel } from './DiagramModel';
import { AbstractPointFactory } from '../factories/AbstractPointFactory';
export declare abstract class LinkModel extends BaseModel<DiagramModel> {
    getPointForPort: (object: PortModel) => PointModel<LinkModel> | null;
    getPortForPoint: (object: PointModel<LinkModel>) => PortModel | null;
    isLastPoint: (object: PointModel<LinkModel>) => boolean;
    getPointModel: (object: string) => PointModel<LinkModel> | undefined;
    getLabel: (object: string) => LabelModel | undefined;
    getPointIndex: (object: PointModel<LinkModel>) => number;
    private _sourcePort;
    private _targetPort;
    private _points;
    private _labels;
    constructor(pointFactory: AbstractPointFactory, linkType?: string, id?: string);
    fromJSON(ob: any, engine: DiagramEngine): void;
    toJSON(): {
        sourcePort: string | null;
        sourcePortParent: string | null;
        targetPort: string | null;
        targetPortParent: string | null;
        points: {
            x: number;
            y: number;
            id: string;
            locked: boolean;
            type: string;
            selected: boolean;
            parent: string | null;
        }[];
        labels: {
            id: string;
            locked: boolean;
            type: string;
            selected: boolean;
            parent: string | null;
        }[];
        id: string;
        locked: boolean;
        type: string;
        selected: boolean;
        parent: string | null;
    };
    delete(): void;
    connect(source: PortModel, target: PortModel): void;
    readonly firstPoint: PointModel;
    readonly lastPoint: PointModel;
    readonly selectedEntities: BaseModel[];
    readonly labels: LabelModel[];
    sourcePort: PortModel | null;
    targetPort: PortModel | null;
    addLabel(label: LabelModel): void;
    readonly points: PointModel[];
    removePoint(point: PointModel): void;
    removeLabel(label: LabelModel): void;
    removePointsBefore(point: PointModel): void;
    removePointsAfter(point: PointModel): void;
    removeMiddlePoints(): void;
    addPoint(point: PointModel, index?: number): PointModel;
}
